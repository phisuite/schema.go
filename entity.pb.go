// Code generated by protoc-gen-go. DO NOT EDIT.
// source: entity.proto

package schema

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Entity struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Status               Status   `protobuf:"varint,3,opt,name=status,proto3,enum=schema.Status" json:"status,omitempty"`
	Data                 []*Field `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Options              []*Field `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{0}
}

func (m *Entity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entity.Unmarshal(m, b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return xxx_messageInfo_Entity.Size(m)
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Entity) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Entity) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNACTIVATED
}

func (m *Entity) GetData() []*Field {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Entity) GetOptions() []*Field {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*Entity)(nil), "schema.Entity")
}

func init() {
	proto.RegisterFile("entity.proto", fileDescriptor_cf50d946d740d100)
}

var fileDescriptor_cf50d946d740d100 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd1, 0xdd, 0x4a, 0xc3, 0x30,
	0x14, 0xc0, 0x71, 0xb2, 0xd6, 0xce, 0x9d, 0xcd, 0x09, 0xc7, 0x9b, 0xb0, 0xab, 0x2a, 0x32, 0xab,
	0x48, 0x91, 0xfa, 0x04, 0x9b, 0x5f, 0x08, 0x82, 0xa5, 0xe2, 0x03, 0xc4, 0x36, 0xb0, 0x80, 0x4d,
	0x4a, 0x73, 0x36, 0xf0, 0x1d, 0x7c, 0x12, 0x9f, 0x52, 0x4c, 0x56, 0x2f, 0x64, 0x60, 0xef, 0xda,
	0xf3, 0xff, 0x11, 0x0e, 0x1c, 0x98, 0x48, 0x4d, 0x8a, 0x3e, 0xd2, 0xa6, 0x35, 0x64, 0x30, 0xb2,
	0xe5, 0x4a, 0xd6, 0x62, 0x36, 0x29, 0x4d, 0x5d, 0x1b, 0xed, 0xa7, 0x27, 0x5f, 0x0c, 0xa2, 0x3b,
	0xc7, 0x10, 0x21, 0xd4, 0xa2, 0x96, 0x9c, 0xc5, 0x2c, 0x19, 0x15, 0xee, 0x1b, 0x39, 0x0c, 0x37,
	0xb2, 0xb5, 0xca, 0x68, 0x3e, 0x70, 0xe3, 0xee, 0x17, 0xe7, 0x10, 0x59, 0x12, 0xb4, 0xb6, 0x3c,
	0x88, 0x59, 0x32, 0xcd, 0xa6, 0xa9, 0x7f, 0x3f, 0x7d, 0x71, 0xd3, 0x62, 0x5b, 0xf1, 0x18, 0xc2,
	0x4a, 0x90, 0xe0, 0x61, 0x1c, 0x24, 0xe3, 0xec, 0xa0, 0x53, 0xf7, 0x4a, 0xbe, 0x57, 0x85, 0x4b,
	0x78, 0x06, 0x43, 0xd3, 0x90, 0x32, 0xda, 0xf2, 0xbd, 0x5d, 0xaa, 0xab, 0xd9, 0xe7, 0x00, 0x46,
	0x7e, 0xd9, 0x45, 0xfe, 0x88, 0xe7, 0x10, 0x3e, 0x29, 0x4b, 0x78, 0xd8, 0xe9, 0x67, 0xcf, 0x66,
	0xbf, 0xab, 0x78, 0x7b, 0xc5, 0x70, 0x0e, 0xc1, 0x83, 0xfc, 0x5f, 0x62, 0x02, 0xd1, 0x4d, 0x2b,
	0x05, 0x49, 0xfc, 0x53, 0x76, 0xc9, 0xd7, 0xa6, 0xea, 0x23, 0x2f, 0x60, 0x7f, 0x51, 0x92, 0xda,
	0xf4, 0xb1, 0x97, 0x00, 0xb7, 0x52, 0xf4, 0xd4, 0xcb, 0x53, 0x38, 0x2a, 0x4d, 0x9d, 0x36, 0x2b,
	0x65, 0xd7, 0x8a, 0xe4, 0xb6, 0x2e, 0xc7, 0x3e, 0xe7, 0x3f, 0xf7, 0xcd, 0xd9, 0x5b, 0xe4, 0x0e,
	0x7d, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x27, 0xf9, 0xe7, 0x0e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EntityAPIClient is the client API for EntityAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntityAPIClient interface {
	List(ctx context.Context, in *Options, opts ...grpc.CallOption) (EntityAPI_ListClient, error)
	Get(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Entity, error)
	Create(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	Update(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	Activate(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	Deactivate(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
}

type entityAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityAPIClient(cc grpc.ClientConnInterface) EntityAPIClient {
	return &entityAPIClient{cc}
}

func (c *entityAPIClient) List(ctx context.Context, in *Options, opts ...grpc.CallOption) (EntityAPI_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EntityAPI_serviceDesc.Streams[0], "/schema.EntityAPI/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &entityAPIListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EntityAPI_ListClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type entityAPIListClient struct {
	grpc.ClientStream
}

func (x *entityAPIListClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *entityAPIClient) Get(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/schema.EntityAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAPIClient) Create(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/schema.EntityAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAPIClient) Update(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/schema.EntityAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAPIClient) Activate(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/schema.EntityAPI/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAPIClient) Deactivate(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/schema.EntityAPI/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityAPIServer is the server API for EntityAPI service.
type EntityAPIServer interface {
	List(*Options, EntityAPI_ListServer) error
	Get(context.Context, *Options) (*Entity, error)
	Create(context.Context, *Entity) (*Entity, error)
	Update(context.Context, *Entity) (*Entity, error)
	Activate(context.Context, *Entity) (*Entity, error)
	Deactivate(context.Context, *Entity) (*Entity, error)
}

// UnimplementedEntityAPIServer can be embedded to have forward compatible implementations.
type UnimplementedEntityAPIServer struct {
}

func (*UnimplementedEntityAPIServer) List(req *Options, srv EntityAPI_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedEntityAPIServer) Get(ctx context.Context, req *Options) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedEntityAPIServer) Create(ctx context.Context, req *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedEntityAPIServer) Update(ctx context.Context, req *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedEntityAPIServer) Activate(ctx context.Context, req *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedEntityAPIServer) Deactivate(ctx context.Context, req *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}

func RegisterEntityAPIServer(s *grpc.Server, srv EntityAPIServer) {
	s.RegisterService(&_EntityAPI_serviceDesc, srv)
}

func _EntityAPI_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Options)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntityAPIServer).List(m, &entityAPIListServer{stream})
}

type EntityAPI_ListServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type entityAPIListServer struct {
	grpc.ServerStream
}

func (x *entityAPIListServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func _EntityAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.EntityAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityAPIServer).Get(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.EntityAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityAPIServer).Create(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.EntityAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityAPIServer).Update(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityAPI_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityAPIServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.EntityAPI/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityAPIServer).Activate(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityAPI_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityAPIServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.EntityAPI/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityAPIServer).Deactivate(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.EntityAPI",
	HandlerType: (*EntityAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _EntityAPI_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _EntityAPI_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EntityAPI_Update_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _EntityAPI_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _EntityAPI_Deactivate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _EntityAPI_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "entity.proto",
}
